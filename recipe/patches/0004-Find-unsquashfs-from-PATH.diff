diff --git a/pkg/image/unpacker/squashfs.go b/pkg/image/unpacker/squashfs.go
index 25ef856f8..1acac6fcf 100644
--- a/pkg/image/unpacker/squashfs.go
+++ b/pkg/image/unpacker/squashfs.go
@@ -62,7 +62,10 @@ type Squashfs struct {
 // NewSquashfs initializes and returns a Squahfs unpacker instance
 func NewSquashfs() *Squashfs {
 	s := &Squashfs{}
+	defaultPath := os.Getenv("PATH")
+	os.Setenv("PATH", os.Getenv("USER_PATH"))
 	s.UnsquashfsPath, _ = exec.LookPath("unsquashfs")
+	os.Setenv("PATH", defaultPath)
 	return s
 }
 
diff --git a/pkg/image/unpacker/squashfs_singularity.go b/pkg/image/unpacker/squashfs_singularity.go
index 67e537259..6f108faf5 100644
--- a/pkg/image/unpacker/squashfs_singularity.go
+++ b/pkg/image/unpacker/squashfs_singularity.go
@@ -39,10 +39,10 @@ func init() {
 
 // getLibraryBinds returns the library bind mounts required by an elf binary.
 // The binary path must be absolute.
-func getLibraryBinds(binary string) ([]libBind, error) {
+func getLibraryBinds(binary string) (string, []libBind, error) { 
 	exe, err := elf.Open(binary)
 	if err != nil {
-		return nil, err
+		return "", nil, err
 	}
 	defer exe.Close()
 
@@ -56,9 +56,9 @@ func getLibraryBinds(binary string) ([]libBind, error) {
 		buf := make([]byte, 4096)
 		n, err := p.ReadAt(buf, 0)
 		if err != nil && err != io.EOF {
-			return nil, err
+			return interp, nil, err
 		} else if n > cap(buf) {
-			return nil, fmt.Errorf("buffer too small to store interpreter")
+			return interp, nil, fmt.Errorf("buffer too small to store interpreter")
 		}
 		// trim null byte to avoid an execution failure with
 		// an invalid argument error
@@ -67,7 +67,7 @@ func getLibraryBinds(binary string) ([]libBind, error) {
 
 	// this is a static binary, nothing to do
 	if interp == "" {
-		return []libBind{}, nil
+		return interp, []libBind{}, nil
 	}
 
 	// run interpreter to list library dependencies for the
@@ -88,7 +88,7 @@ func getLibraryBinds(binary string) ([]libBind, error) {
 	cmd.Env = []string{}
 
 	if err := cmd.Run(); err != nil {
-		return nil, fmt.Errorf("while getting library dependencies: %s\n%s", err, errBuf.String())
+		return interp, nil, fmt.Errorf("while getting library dependencies: %s\n%s", err, errBuf.String())
 	}
 
 	// parse the output to get matches for ' /an/absolute/path ('
@@ -100,1 +100,1 @@ func parseLibraryBinds
-func parseLibraryBinds(buf io.Reader) ([]libBind, error) {
+func parseLibraryBinds(buf io.Reader) (string, []libBind, error) {
@@ -141,6 +141,6 @@ func getLibraryBinds(binary string) ([]libBind, error) {
	}
 
-	return libs, nil
+	return interp, libs, nil
 }
 
 // unsquashfsSandboxCmd is the command instance for executing unsquashfs command
@@ -181,7 +181,7 @@ func unsquashfsSandboxCmd(unsquashfs string, dest string, filename string, filte
 	}
 
 	// get the library dependencies of unsquashfs
-	libs, err := getLibraryBinds(unsquashfs)
+	interp, libs, err := getLibraryBinds(unsquashfs)
 	if err != nil {
 		return nil, err
 	}
@@ -278,6 +278,9 @@ func unsquashfsSandboxCmd(unsquashfs string, dest string, filename string, filte
 	args = append(args, rootfs)
 
 	// unsquashfs execution arguments
+	if interp != "" {
+		args = append(args, interp)
+	}
 	args = append(args, unsquashfs)
 	args = append(args, opts...)
 
